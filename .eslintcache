[{"X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\index.js":"1","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\App.js":"2","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\menu\\index.js":"3","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\user_bar\\user_bar.js":"4","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\data\\data.js":"5","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\index.js":"6","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\codeEditor.js":"7","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\xCompo.js":"8","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\textEditor.js":"9","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\codeView.js":"10","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\textView.js":"11","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\imgView.js":"12","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\imgEditor.js":"13","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\index.js":"14","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\App.js":"15","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\data\\data.js":"16","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\user_bar\\user_bar.js":"17","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\menu\\index.js":"18","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\index.js":"19","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\xCompo.js":"20","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\imgEditor.js":"21","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\imgView.js":"22","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\textView.js":"23","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\codeView.js":"24","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\codeEditor.js":"25","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\textEditor.js":"26"},{"size":581,"mtime":1608123562459,"results":"27","hashOfConfig":"28"},{"size":1390,"mtime":1609847280591,"results":"29","hashOfConfig":"28"},{"size":3666,"mtime":1610616424942,"results":"30","hashOfConfig":"28"},{"size":3075,"mtime":1607744453906,"results":"31","hashOfConfig":"28"},{"size":2332,"mtime":1610609233234,"results":"32","hashOfConfig":"28"},{"size":7613,"mtime":1611769451474,"results":"33","hashOfConfig":"28"},{"size":2568,"mtime":1609168019798,"results":"34","hashOfConfig":"28"},{"size":936,"mtime":1611770601983,"results":"35","hashOfConfig":"28"},{"size":3127,"mtime":1609167767696,"results":"36","hashOfConfig":"28"},{"size":1355,"mtime":1609228178711,"results":"37","hashOfConfig":"28"},{"size":1257,"mtime":1609228867852,"results":"38","hashOfConfig":"28"},{"size":1430,"mtime":1611839338892,"results":"39","hashOfConfig":"28"},{"size":2554,"mtime":1612185733323,"results":"40","hashOfConfig":"28"},{"size":581,"mtime":1608123562459,"results":"41","hashOfConfig":"42"},{"size":1390,"mtime":1609847280591,"results":"43","hashOfConfig":"42"},{"size":2338,"mtime":1612473173507,"results":"44","hashOfConfig":"42"},{"size":3075,"mtime":1607744453906,"results":"45","hashOfConfig":"42"},{"size":3666,"mtime":1610616424942,"results":"46","hashOfConfig":"42"},{"size":7650,"mtime":1612471860391,"results":"47","hashOfConfig":"42"},{"size":936,"mtime":1611770601983,"results":"48","hashOfConfig":"42"},{"size":3305,"mtime":1612473408200,"results":"49","hashOfConfig":"42"},{"size":1181,"mtime":1612471683458,"results":"50","hashOfConfig":"42"},{"size":1257,"mtime":1609228867852,"results":"51","hashOfConfig":"42"},{"size":1355,"mtime":1609228178711,"results":"52","hashOfConfig":"42"},{"size":2579,"mtime":1612471917286,"results":"53","hashOfConfig":"42"},{"size":3138,"mtime":1612474560877,"results":"54","hashOfConfig":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"rfla8",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"94"},"1rehx87",{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"94"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},"X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\index.js",["126"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nconst TopMostParent = ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// window.updateTopMostParent = (index) => {\n  \n// }\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n",["127","128"],"X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\App.js",["129","130","131"],"import { Component } from 'react';\nimport './App.css';\nimport Menu from \"./components/menu/index\";\nimport Notebook from \"./components/notebook/index\";\n\nimport UserBar from \"./components/user_bar/user_bar\";\nimport {Data} from './components/data/data';\n\nclass App extends Component {\n  state = {\n    topics: [],\n    open_topic : \"World\",\n    open_topic_index : \"\",\n    selected : \"\"\n  };\n  componentDidMount(){\n    // fetch('http://localhost:9000/docs')\n    Data(`/docs`).then(data => { \n      this.setState({topics:data[0].topics});\n      this.setState({open_topic:this.state.topics[0]});\n      this.setState({open_topic_index: 0 });\n      // console.log(\"Data4443\",this.state.topics,this.state.open_topic);\n    });\n  }\n  updateTopic = (index) => {\n    this.setState({open_topic:this.state.topics[index]});\n    this.setState({open_topic_index: index });\n    console.log(\"Topic Changed to \",this.state.open_topic)\n  }\n  render(){\n    let topic = this.state.open_topic;\n    const selected = this.state.selected;\n    let prop = {update_topic: this.updateTopic, state: this.state}\n    // console.log(\"propsss\",prop);\n    return (\n      <div className=\"App\">\n      <div className=\"content\">\n            {/* <UserBar /> */}\n            <Menu data={prop} />\n            <Notebook data={prop}/>\n            <div id=\"extra\">\n            </div>\n        </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\menu\\index.js",[],"X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\user_bar\\user_bar.js",[],"X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\data\\data.js",["132"],"// // component To export json data\r\nimport axios from 'axios';\r\nconst fs = require(\"fs\");\r\n\r\n\r\nfunction Data(file) {\r\n    let json = Promise.all([\r\n        // // fetch(`${file}`),\r\n        // fetch(`${process.env.PUBLIC_URL}/World.json`),\r\n        // fetch(`${process.env.PUBLIC_URL}/Circle.json`),\r\n        // fetch(`http://localhost:3005/docs`),\r\n        // fetch(`http://localhost:3005/docs`),\r\n        fetch(file),\r\n        // fetch(`/docs`),\r\n      ])\r\n      .then(responses => Promise.all(responses.map(resp => resp.json())));\r\n      return (json);\r\n};\r\n\r\nfunction insertTopic(topic_name){\r\n  console.log(\"here for process.:\",topic_name,);\r\n  var data = {\"new_topic\" : topic_name}\r\n  axios.post('http://localhost:3005/docs/newtopic', data)\r\n        .then(() => console.log('new topic sent'))\r\n        .catch(err => {\r\n          console.error(err);\r\n        });\r\n  // console.log(\"cell to be added\",\"t i \",topic,\"c i \" , cell_index,\"source \", source);\r\n}\r\n\r\nasync function Notebook_data(topic){\r\n  const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ \"fileName\" : topic })\r\n  };\r\n  const response = await fetch('http://localhost:3005/docs/topics', requestOptions);\r\n  const data = await response.json();\r\n  // console.log(\"1012 \",data );\r\n  // this.setState({ postId: data.id });\r\n  return data;\r\n}\r\n\r\nasync function updateCell(topic){\r\n  // var source = source;\r\n  // topic.cells[cell_index].source=source;\r\n  await axios.post('http://localhost:3005/docs/update', topic)\r\n            .then(() => console.log('topic cell updated'))\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n};\r\n\r\nfunction insertCell(datafun,topic,cell_index,source,cell_type ){\r\n      const content = {\r\n        \"cell_layout\": {\"cell_type\":cell_type, \"code_lan\": \"javascript\"},\r\n        \"source\" : \"Add Edit Content Here....!\"\r\n      };\r\n      topic.cells.splice(cell_index+1,0,content);\r\n      axios.post('http://localhost:3005/docs', topic)\r\n            .then(() => console.log('topic sent'))\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n      // console.log(\"cell to be added\",\"t i \",topic,\"c i \" , cell_index,\"source \", source);\r\n}\r\nexport {Data,Notebook_data, insertCell,updateCell, insertTopic};","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\index.js",["133","134","135","136","137","138","139"],"import React , {Component, useEffect } from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/index2.css';\r\n// import './css/prism.js';\r\nimport {Data,Notebook_data,insertCell,updateCell} from './../data/data';\r\nimport {Editor, Display } from './xCompo';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n\r\n\r\nconst fs = require(\"fs\");\r\n\r\nclass notebook extends Component {\r\n    state = {\r\n        // topics: [],\r\n        open_topic : [],\r\n        open_topic_name : 'none',\r\n        open_topic_index : -1,\r\n        selected : \"\",\r\n        button_clicked : \"\",\r\n        editor_toggle : false,\r\n        content:\"\",\r\n        cell_types: [\"Code\",\"Markdown\",\"Img\"]\r\n    };\r\n    componentDidMount(){\r\n        Notebook_data(this.state.open_topic_name).then(data => { \r\n            this.setState({open_topic:data});\r\n            // console.log(\"Notbook_data from mount\",data);\r\n          });\r\n    };\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.open_topic_name !== prevState.open_topic_name ){\r\n            Notebook_data(this.state.open_topic_name).then(data => { \r\n            this.setState({open_topic:data});\r\n            // console.log(\"Notbook_data from update\",data);\r\n          });\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (!nextProps.data) return console.log(\"data np getDerivedStateFromProps\"); // data hasn't been loaded yet so do nothing\r\n        const {data} = nextProps;\r\n        var {open_topic_name,open_topic_index} = prevState;\r\n        open_topic_name = data.state.open_topic;\r\n        open_topic_index = data.state.open_topic_index;\r\n        // console.log(\"opened topic now\");\r\n        return {open_topic_name,open_topic_index};\r\n    }\r\n    \r\n    Copy_btn(index) {\r\n        // Copy to Clipbord Button\r\n        var input = document.createElement('input');\r\n        var value  = this.state.open_topic.cells[index].source;\r\n        input.setAttribute('value', value);\r\n        document.body.appendChild(input);\r\n        input.select();\r\n        var result = document.execCommand('copy');\r\n        document.body.removeChild(input);\r\n        return result;\r\n    };\r\n    editor_toggle = () => {\r\n        this.setState({editor_toggle : this.state.editor_toggle ? false : true});\r\n        this.setState({selected:\"\"});\r\n        // console.log(\"toggle state changed to \", this.state.editor_toggle);\r\n    };\r\n\r\n    editor_on = (index) => {\r\n        if (this.state.editor_toggle ){\r\n            this.setState({selected:index})\r\n        };\r\n        // console.log(this.state.selected, \"is selected for editing...\");\r\n    };\r\n\r\n    def_className = (index,cell_layout) => {\r\n        let selected = this.state.selected === index ? \"selected \" : \"\";\r\n        let className = \"nb-content cell \"+ selected + cell_layout;\r\n        return className;\r\n    };\r\n\r\n    addCell = (index,cell_type) => {\r\n        // console.log(\"aDD cell triggered at \",index+1);\r\n        var buton_clic = this.state.button_clicked===\"\" ? \"clicked\" : \"\";\r\n        this.setState({button_clicked: buton_clic })\r\n        insertCell(Data,this.state.open_topic,index,\"Edit Content Here\",cell_type);\r\n    };\r\n    updateCell_content = (index,value,lan,date) => {\r\n        // console.log(\"updateswll\", index, value);\r\n        let topic = this.state.open_topic;\r\n        topic.cells[index].source=value;\r\n        topic.cells[index].cell_layout[\"code_lan\"] = lan;\r\n        updateCell(topic);\r\n    }\r\n\r\n    render(){\r\n        var topic =this.state.open_topic;\r\n        var state = this.state;\r\n        let Prop = {updatecell: this.updateCell_content};\r\n        // console.log(\"all state : \",this.state);\r\n        \r\n    return (\r\n        <div id=\"notebook\">\r\n            <div id = \"notebook_user_id\">\r\n                Top User Bar\r\n                <button onClick = {this.editor_toggle.bind(this)} style={{float: \"right\"}} >\r\n                    {this.state.editor_toggle ? \"Editor on\" : \"Editor off\"}\r\n                </button>\r\n            </div>\r\n            <div id=\"notebook_current\" >\r\n                <div id=\"notebook_Row\" className = \"notebook\">\r\n                <div id =\"notebook_topic\" className = \"nb-content title-cell\">\r\n                    {topic ? topic.name:console.log(\"no title found\",this.state.topic)}\r\n                </div>\r\n                <div className={\"nb-content\" }>\r\n                    {topic.cells ? \r\n                    topic.cells.map((d,i) => (\r\n                        <div className={\"cell-wrapper\"}>\r\n                        <div className = {this.def_className( i, d.cell_layout.cell_type) }>\r\n                            <div  key={i} onClick={this.editor_on.bind(this,i)}>\r\n                                <div className=\"cell-content\">\r\n                                    {d.cell_layout.cell_type===\"Code\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                    {\r\n                                    d.cell_layout.cell_type===\"Markdown\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                    {\r\n                                    d.cell_layout.cell_type===\"Img\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"nb-content add-cell\">\r\n                            <div class=\"nb-content add-cell-buttons\">\r\n                                {this.state.cell_types.map((cell_type) => (\r\n                                <colab-toolbar-button class={\" nb-content add-\"+{cell_type}+\" add-button\"} onClick={this.addCell.bind(this,i,cell_type)} icon=\"icons:add\" title={\"Add \"+{cell_type}+\" Here\"}>\r\n                                    Add {cell_type}\r\n                                </colab-toolbar-button>\r\n                                ))}\r\n                            </div>\r\n                            <hr/>\r\n                        </div>\r\n                        </div>\r\n                        )):<></>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id = \"notebook_footer\">Botton User Bar0 </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\nexport default notebook;\r\n\r\n","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\codeEditor.js",["140","141"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst CodeEditor = (props) => {\r\n  const [content, setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodelan] = useState(props.data.d.cell_layout.code_lan);\r\n  const [last_update,setLastUpdate] = useState(Date.now())\r\n  const update_atInterval = () => {\r\n    var index = props.data.index;\r\n    console.log(\"useefeect or butoon clicked\",index);\r\n    props.data.updatecell(index,content,code_lan,last_update);\r\n    setLastUpdate(Date.now());\r\n  };\r\n  const Lan_list = [\r\n    {\r\n      label: \"javascript\", value: \"javascript\",\r\n    },\r\n    {\r\n      label: \"python\", value: \"python\",\r\n    },\r\n    {\r\n      label: \"c++\", value: \"cpp\",\r\n    },\r\n    {\r\n      label: \"html\", value: \"html\",\r\n    },\r\n  ];\r\n\r\n  const handleKeyDown = (evt) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      // update_atInterval();\r\n    // if (last_update + 5000 < Date.now() ){\r\n    // }\r\n  }, [props.data.d.cell_layout.code_lan, content]);\r\n\r\n  return (\r\n    <div className=\"code-edit-container\">\r\n      <div>\r\n      <div className=\"select-container\">\r\n          <select value={code_lan} onChange={(e)=> {setCodelan(e.target.value)}}>\r\n            {Lan_list.map((option) => (\r\n              <option value={option.value}>{option.label}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"code-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={update_atInterval}>\r\n          save\r\n        </button>\r\n        </div>\r\n      <SyntaxHighlighter  language={code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n        {content}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CodeEditor;","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\xCompo.js",["142"],"import React , {Component} from 'react';\r\nimport CodeEditor from './editor/codeEditor';\r\nimport TextEditor from './editor/textEditor';\r\nimport ImgEditor from './editor/imgEditor';\r\nimport CodeView from './display/codeView';\r\nimport TextView from './display/textView';\r\nimport ImgView from './display/imgView';\r\n\r\nconst Editor =  (props) => {\r\n    const components = {\r\n        Code : CodeEditor,\r\n        Markdown : TextEditor,\r\n        Img :  ImgEditor\r\n    }\r\n    var  VarEditor = components[props.data.d.cell_layout.cell_type];\r\n    // console.log(\"ksjfhvbs\",VarEditor);\r\n    return <VarEditor data={props.data}/>;\r\n};\r\n\r\nconst Display = (props) => {\r\n    //\r\n    const components = {\r\n        Code : CodeView,\r\n        Markdown : TextView,\r\n        Img :  ImgView\r\n    }\r\n    //\r\n    var  VarDisplay = components[props.data.d.cell_layout.cell_type];\r\n    \r\n    return <VarDisplay data={props.data}/>;\r\n};\r\nexport{ Editor , Display};","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\textEditor.js",["143","144","145"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst TodeEditor = (props) => {\r\n  const [content, setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodelan] = useState(props.data.d.cell_layout.code_lan);\r\n  const [last_update,setLastUpdate] = useState(Date.now())\r\n  const update_atInterval = () => {\r\n    var index = props.data.index;\r\n    console.log(\"useefeect or butoon clicked\",index);\r\n    props.data.updatecell(index,content,code_lan,last_update);\r\n    setLastUpdate(Date.now());\r\n  };\r\n  const Lan_list = [\r\n    {\r\n      label: \"javascript\", value: \"javascript\",\r\n    },\r\n    {\r\n      label: \"python\", value: \"python\",\r\n    },\r\n    {\r\n      label: \"c++\", value: \"cpp\",\r\n    },\r\n    {\r\n      label: \"html\", value: \"html\",\r\n    },\r\n  ];\r\n\r\n  const handleKeyDown = (evt) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      // update_atInterval();\r\n    // if (last_update + 5000 < Date.now() ){\r\n    // }\r\n  }, [props.data.d.cell_layout.code_lan, content]);\r\n\r\n  return (\r\n    <div className=\"text-edit-container\">\r\n      <div>\r\n      <div className=\"select-container\">\r\n          <select value={code_lan} onChange={(e)=> {setCodelan(e.target.value)}}>\r\n            {Lan_list.map((option) => (\r\n              <option value={option.value}>{option.label}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"code-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={update_atInterval}>\r\n          save\r\n        </button>\r\n        </div>\r\n      <SyntaxHighlighter  language={code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n        {content}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default TodeEditor;\r\n\r\n\r\n\r\n\r\n// <div className=\"code-edit-container\">\r\n// <textarea\r\n// className=\"code-input\"\r\n// value={content}\r\n// onChange={(_)=>{this.def_contentchange(_.target.value)}}\r\n//  onKeyDown={this.handleKeyDown}\r\n// />\r\n{/* <SyntaxHighlighter  language={d.cell_layout.code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n{d.source + content}\r\n</SyntaxHighlighter> */}\r\n// <pre className=\"code-output\" //contentEditable={this.def_contentEditable(i)}\r\n// >\r\n// <code className={\"language-\"+d.cell_layout.code_lan}>\r\n// {content}\r\n// </code>\r\n// </pre>\r\n// </div>","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\codeView.js",["146","147","148","149","150"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst CodeView = (props) => {\r\n\r\n  const [content , setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodeLan] = useState(props.data.d.cell_layout.code_lan)\r\n\r\n  const Copy_btn = () => {\r\n    // Copy to Clipbord Button\r\n    console.log(\"button Display clicked\");\r\n    var input = document.createElement('input');\r\n    // var value  = this.state.open_topic.cells[index].source;\r\n    var value  = content;\r\n    input.setAttribute('value', value);\r\n    document.body.appendChild(input);\r\n    input.select();\r\n    var result = document.execCommand('copy');\r\n    document.body.removeChild(input);\r\n    return result;\r\n};\r\n  \r\n  return (\r\n    <div>\r\n      <button onClick={Copy_btn.bind()} style={{backgroundColor: \"black\", color: \"white\",  float : \"right\", width: \"auto\", height: \"auto\" }}>\r\n          Copy  \r\n      </button>\r\n      <SyntaxHighlighter  language={code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n        {content}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CodeView;","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\textView.js",["151","152","153","154","155","156","157","158"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst TextView = (props) => {\r\n\r\n  const [content , setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodeLan] = useState(props.data.d.cell_layout.code_lan)\r\n\r\n  const Copy_btn = () => {\r\n    // Copy to Clipbord Button\r\n    console.log(\"button Display clicked\");\r\n    var input = document.createElement('input');\r\n    // var value  = this.state.open_topic.cells[index].source;\r\n    var value  = content;\r\n    input.setAttribute('value', value);\r\n    document.body.appendChild(input);\r\n    input.select();\r\n    var result = document.execCommand('copy');\r\n    document.body.removeChild(input);\r\n    return result;\r\n};\r\n  \r\n  return (\r\n    <div>\r\n      <button onClick={Copy_btn.bind()} style={{backgroundColor: \"black\", color: \"white\",  float : \"right\", width: \"auto\", height: \"auto\" }}>\r\n          Copy  \r\n      </button>\r\n      <div>\r\n        {content}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextView;","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\display\\imgView.js",["159","160","161","162","163"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nconst CodeView = (props) => {\r\n\r\n  const [content , setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodeLan] = useState(props.data.d.cell_layout.code_lan)\r\n\r\n  const Copy_btn = () => {\r\n    // Copy to Clipbord Button\r\n    console.log(\"button Display clicked\");\r\n    var input = document.createElement('input');\r\n    // var value  = this.state.open_topic.cells[index].source;\r\n    var value  = content;\r\n    input.setAttribute('value', value);\r\n    document.body.appendChild(input);\r\n    input.select();\r\n    var result = document.execCommand('copy');\r\n    document.body.removeChild(input);\r\n    return result;\r\n};\r\n  return (\r\n    <div>\r\n      <button onClick={Copy_btn.bind()} style={{backgroundColor: \"black\", color: \"white\",  float : \"right\", width: \"auto\", height: \"auto\" }}>\r\n          Copy  \r\n      </button>\r\n      <img src={content} alt=\"Apple logo\"/>\r\n      {/* <ContentEditable\r\n            // innerRef={contentEditable}\r\n            html={content} // innerHTML of the editable div\r\n            disabled={true}       // use true to disable editing\r\n            // onChange={base64_editor} // handle innerHTML change\r\n            tagName='article' // Use a custom HTML tag (uses a div by default)\r\n      /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeView;","X:\\GIT-HUB\\Doc-io_main\\doc-io\\src\\components\\notebook\\editor\\imgEditor.js",["164","165","166","167"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\index.js",["168"],["169","170"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\App.js",["171","172","173"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\data\\data.js",["174"],"// // component To export json data\r\nimport axios from 'axios';\r\nconst fs = require(\"fs\");\r\n\r\n\r\nfunction Data(file) {\r\n    let json = Promise.all([\r\n        // // fetch(`${file}`),\r\n        // fetch(`${process.env.PUBLIC_URL}/World.json`),\r\n        // fetch(`${process.env.PUBLIC_URL}/Circle.json`),\r\n        // fetch(`http://localhost:3005/docs`),\r\n        // fetch(`http://localhost:3005/docs`),\r\n        fetch(file),\r\n        // fetch(`/docs`),\r\n      ])\r\n      .then(responses => Promise.all(responses.map(resp => resp.json())));\r\n      return (json);\r\n};\r\n\r\nfunction insertTopic(topic_name){\r\n  console.log(\"here for process.:\",topic_name,);\r\n  var data = {\"new_topic\" : topic_name}\r\n  axios.post('http://localhost:3005/docs/newtopic', data)\r\n        .then(() => console.log('new topic sent'))\r\n        .catch(err => {\r\n          console.error(err);\r\n        });\r\n  // console.log(\"cell to be added\",\"t i \",topic,\"c i \" , cell_index,\"source \", source);\r\n}\r\n\r\nasync function Notebook_data(topic){\r\n  const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ \"fileName\" : topic })\r\n  };\r\n  const response = await fetch('http://localhost:3005/docs/topics', requestOptions);\r\n  const data = await response.json();\r\n  // console.log(\"1012 \",data );\r\n  // this.setState({ postId: data.id });\r\n  return data;\r\n}\r\n\r\nasync function updateCell(topic){\r\n  // var source = source;\r\n  // topic.cells[cell_index].source=source;\r\n  await axios.post('http://localhost:3005/docs/update', topic)\r\n            .then(() => console.log('topic cell updated'))\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n};\r\n\r\nfunction insertCell(datafun,topic,cell_index,source,cell_type ){\r\n      const content = {\r\n        \"cell_layout\": {\"cell_type\":cell_type, \"code_lan\": \"\",\"img_format\":\"\"},\r\n        \"source\" : \"Add Edit Content Here....!\"\r\n      };\r\n      topic.cells.splice(cell_index+1,0,content);\r\n      axios.post('http://localhost:3005/docs', topic)\r\n            .then(() => console.log('topic sent'))\r\n            .catch(err => {\r\n              console.error(err);\r\n            });\r\n      // console.log(\"cell to be added\",\"t i \",topic,\"c i \" , cell_index,\"source \", source);\r\n}\r\nexport {Data,Notebook_data, insertCell,updateCell, insertTopic};","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\user_bar\\user_bar.js",[],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\menu\\index.js",[],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\index.js",["175","176","177","178","179","180","181"],"import React , {Component, useEffect } from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/index2.css';\r\n// import './css/prism.js';\r\nimport {Data,Notebook_data,insertCell,updateCell} from './../data/data';\r\nimport {Editor, Display } from './xCompo';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\n\r\n\r\n\r\nconst fs = require(\"fs\");\r\n\r\nclass notebook extends Component {\r\n    state = {\r\n        // topics: [],\r\n        open_topic : [],\r\n        open_topic_name : 'none',\r\n        open_topic_index : -1,\r\n        selected : \"\",\r\n        button_clicked : \"\",\r\n        editor_toggle : false,\r\n        content:\"\",\r\n        cell_types: [\"Code\",\"Markdown\",\"Img\"]\r\n    };\r\n    componentDidMount(){\r\n        Notebook_data(this.state.open_topic_name).then(data => { \r\n            this.setState({open_topic:data});\r\n            // console.log(\"Notbook_data from mount\",data);\r\n          });\r\n    };\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.state.open_topic_name !== prevState.open_topic_name ){\r\n            Notebook_data(this.state.open_topic_name).then(data => { \r\n            this.setState({open_topic:data});\r\n            // console.log(\"Notbook_data from update\",data);\r\n          });\r\n        };\r\n    };\r\n\r\n    static getDerivedStateFromProps(nextProps, prevState) {\r\n        if (!nextProps.data) return console.log(\"data np getDerivedStateFromProps\"); // data hasn't been loaded yet so do nothing\r\n        const {data} = nextProps;\r\n        var {open_topic_name,open_topic_index} = prevState;\r\n        open_topic_name = data.state.open_topic;\r\n        open_topic_index = data.state.open_topic_index;\r\n        // console.log(\"opened topic now\");\r\n        return {open_topic_name,open_topic_index};\r\n    }\r\n    \r\n    Copy_btn(index) {\r\n        // Copy to Clipbord Button\r\n        var input = document.createElement('input');\r\n        var value  = this.state.open_topic.cells[index].source;\r\n        input.setAttribute('value', value);\r\n        document.body.appendChild(input);\r\n        input.select();\r\n        var result = document.execCommand('copy');\r\n        document.body.removeChild(input);\r\n        return result;\r\n    };\r\n    editor_toggle = () => {\r\n        this.setState({editor_toggle : this.state.editor_toggle ? false : true});\r\n        this.setState({selected:\"\"});\r\n        // console.log(\"toggle state changed to \", this.state.editor_toggle);\r\n    };\r\n\r\n    editor_on = (index) => {\r\n        if (this.state.editor_toggle ){\r\n            this.setState({selected:index})\r\n        };\r\n        // console.log(this.state.selected, \"is selected for editing...\");\r\n    };\r\n\r\n    def_className = (index,cell_layout) => {\r\n        let selected = this.state.selected === index ? \"selected \" : \"\";\r\n        let className = \"nb-content cell \"+ selected + cell_layout;\r\n        return className;\r\n    };\r\n\r\n    addCell = (index,cell_type) => {\r\n        // console.log(\"aDD cell triggered at \",index+1);\r\n        var buton_clic = this.state.button_clicked===\"\" ? \"clicked\" : \"\";\r\n        this.setState({button_clicked: buton_clic })\r\n        insertCell(Data,this.state.open_topic,index,\"Edit Content Here\",cell_type);\r\n    };\r\n    updateCell_content = (index,value,sub_layout,sub_layout_value,date) => {\r\n        // console.log(\"updateswll\", index, value);\r\n        let topic = this.state.open_topic;\r\n        topic.cells[index].source=value;\r\n        topic.cells[index].cell_layout[sub_layout] = sub_layout_value;\r\n        updateCell(topic);\r\n    }\r\n\r\n    render(){\r\n        var topic =this.state.open_topic;\r\n        var state = this.state;\r\n        let Prop = {updatecell: this.updateCell_content};\r\n        // console.log(\"all state : \",this.state);\r\n        \r\n    return (\r\n        <div id=\"notebook\">\r\n            <div id = \"notebook_user_id\">\r\n                Top User Bar\r\n                <button onClick = {this.editor_toggle.bind(this)} style={{float: \"right\"}} >\r\n                    {this.state.editor_toggle ? \"Editor on\" : \"Editor off\"}\r\n                </button>\r\n            </div>\r\n            <div id=\"notebook_current\" >\r\n                <div id=\"notebook_Row\" className = \"notebook\">\r\n                <div id =\"notebook_topic\" className = \"nb-content title-cell\">\r\n                    {topic ? topic.name:console.log(\"no title found\",this.state.topic)}\r\n                </div>\r\n                <div className={\"nb-content\" }>\r\n                    {topic.cells ? \r\n                    topic.cells.map((d,i) => (\r\n                        <div className={\"cell-wrapper\"}>\r\n                        <div className = {this.def_className( i, d.cell_layout.cell_type) }>\r\n                            <div  key={i} onClick={this.editor_on.bind(this,i)}>\r\n                                <div className=\"cell-content\">\r\n                                    {d.cell_layout.cell_type===\"Code\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                    {\r\n                                    d.cell_layout.cell_type===\"Markdown\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                    {\r\n                                    d.cell_layout.cell_type===\"Img\" ? \r\n                                        this.state.selected===i ? \r\n                                        <Editor data={{d:d,updatecell:this.updateCell_content,index:i}} /> : \r\n                                        <>\r\n                                        <Display data={{d:d,updatecell:this.updateCell_content,index:i}} />\r\n                                        </> : \r\n                                        <></>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"nb-content add-cell\">\r\n                            <div class=\"nb-content add-cell-buttons\">\r\n                                {this.state.cell_types.map((cell_type) => (\r\n                                <colab-toolbar-button class={\" nb-content add-\"+{cell_type}+\" add-button\"} onClick={this.addCell.bind(this,i,cell_type)} icon=\"icons:add\" title={\"Add \"+{cell_type}+\" Here\"}>\r\n                                    Add {cell_type}\r\n                                </colab-toolbar-button>\r\n                                ))}\r\n                            </div>\r\n                            <hr/>\r\n                        </div>\r\n                        </div>\r\n                        )):<></>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div id = \"notebook_footer\">Botton User Bar0 </div>\r\n        </div>\r\n    );\r\n    }\r\n}\r\nexport default notebook;\r\n\r\n","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\xCompo.js",["182"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\imgEditor.js",["183","184","185","186","187"],"import React, { useState, useEffect } from \"react\";\r\nimport ContentEditable from 'react-contenteditable';\r\nimport './css/imgEditor.css';\r\n\r\nconst ImgEditor = (props) => {\r\n    const contentEditable = React.createRef();\r\n  const [content, setContent] = useState(props.data.d.source);\r\n  const [img_format, setFormat] = useState(props.data.d.cell_layout.img_format);\r\n  const [img_src, setImgSrc] = useState(true);\r\n  const [last_update,setLastUpdate] = useState(Date.now())\r\n  const format_list = [\r\n    {\r\n      label: \"External Address\", value: \"http\",\r\n    },\r\n    {\r\n      label: \"ClipBoard/png\", value: \"image/png\",\r\n    },\r\n    {\r\n      label: \"jpg\", value: \"image/jpg\",\r\n    },\r\n    {\r\n      label: \"jpeg\", value: \"image/jpeg\",\r\n    },\r\n  ];\r\n  const update_atInterval = () => {\r\n    var index = props.data.index;\r\n    console.log(\"useefeect or butoon clicked\",index);\r\n    props.data.updatecell(index,content,\"img_format\",img_format,last_update);\r\n    setLastUpdate(Date.now());\r\n  };\r\n\r\n//   const update_imgSrc = () => {\r\n//     // console.log(\"1 \",img_src);\r\n//     var state = img_src ? false : true;  \r\n//     setImgSrc(state);\r\n//   };\r\n\r\n  const base64_editor = (e) => {\r\n      var value = e.target.value;\r\n      console.log(e.target.value);\r\n      setContent(value);\r\n    };\r\n\r\n  const handleKeyDown = (evt) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      console.log(\"useeffects\");\r\n  }, [props.data.d.cell_layout.img_format, content]);\r\n\r\n  return (\r\n    <div className=\"text-edit-container\">\r\n      <div>\r\n      {/* <button onClick={update_imgSrc}>\r\n          {\"enter \"}{img_src ? \"src\" : \"Clipboard\" }\r\n      </button> */}\r\n      {/* {img_src ? <textarea \r\n        className=\"img-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        /> : <></>\r\n        }  */}\r\n        <div className=\"select-container\">\r\n          <select value={img_format} onChange={(e)=> {setFormat(e.target.value)}}>\r\n            {format_list.map((option) => (\r\n              <option value={option.value}>{option.label}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n        <ContentEditable\r\n            innerRef={contentEditable}\r\n            html={content}              // innerHTML of the editable div\r\n            disabled={false}           // use true to disable editing\r\n            onChange={base64_editor } // handle innerHTML change\r\n            tagName='article'        // Use a custom HTML tag (uses a div by default)\r\n      />\r\n        <button onClick={update_atInterval}>\r\n          save\r\n        </button>\r\n        </div>\r\n        <div>\r\n          {img_format == \"http\" ? <img src={content}/>:<td dangerouslySetInnerHTML={{__html: content}} />}\r\n        </div>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default ImgEditor;","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\imgView.js",["188","189","190","191","192"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nconst CodeView = (props) => {\r\n\r\n  const [content , setContent] = useState(props.data.d.source);\r\n  const [img_format, setCodeLan] = useState(props.data.d.cell_layout.img_format)\r\n\r\n  const Copy_btn = () => {\r\n    // Copy to Clipbord Button\r\n    console.log(\"button Display clicked\");\r\n    var input = document.createElement('input');\r\n    // var value  = this.state.open_topic.cells[index].source;\r\n    var value  = content;\r\n    input.setAttribute('value', value);\r\n    document.body.appendChild(input);\r\n    input.select();\r\n    var result = document.execCommand('copy');\r\n    document.body.removeChild(input);\r\n    return result;\r\n};\r\n  return (\r\n    <div>\r\n      <button onClick={Copy_btn.bind()} style={{backgroundColor: \"black\", color: \"white\",  float : \"right\", width: \"auto\", height: \"auto\" }}>\r\n          Copy  \r\n      </button>\r\n      <div>\r\n          {img_format == \"http\" ? <img src={content} alt=\"Apple logo\"/>:<td dangerouslySetInnerHTML={{__html: content}} />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeView;","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\textView.js",["193","194","195","196","197","198","199","200"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\display\\codeView.js",["201","202","203","204","205"],"X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\codeEditor.js",["206","207"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst CodeEditor = (props) => {\r\n  const [content, setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodelan] = useState(props.data.d.cell_layout.code_lan);\r\n  const [last_update,setLastUpdate] = useState(Date.now())\r\n  const update_atInterval = () => {\r\n    var index = props.data.index;\r\n    console.log(\"useefeect or butoon clicked\",index);\r\n    props.data.updatecell(index,content,\"code_lan\",code_lan,last_update);\r\n    setLastUpdate(Date.now());\r\n  };\r\n  const Lan_list = [\r\n    {\r\n      label: \"javascript\", value: \"javascript\",\r\n    },\r\n    {\r\n      label: \"python\", value: \"python\",\r\n    },\r\n    {\r\n      label: \"c++\", value: \"cpp\",\r\n    },\r\n    {\r\n      label: \"html\", value: \"html\",\r\n    },\r\n  ];\r\n\r\n  const handleKeyDown = (evt) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      // update_atInterval();\r\n    // if (last_update + 5000 < Date.now() ){\r\n    // }\r\n  }, [props.data.d.cell_layout.code_lan, content]);\r\n\r\n  return (\r\n    <div className=\"code-edit-container\">\r\n      <div>\r\n      <div className=\"select-container\">\r\n          <select value={code_lan} onChange={(e)=> {setCodelan(e.target.value)}}>\r\n            {Lan_list.map((option) => (\r\n              <option value={option.value}>{option.label}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"code-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={update_atInterval}>\r\n          save\r\n        </button>\r\n        </div>\r\n      <SyntaxHighlighter  language={code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n        {content}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default CodeEditor;","X:\\GIT-HUB\\Doc-io_main\\Doc-io\\src\\components\\notebook\\editor\\textEditor.js",["208","209","210"],"import React, { useState, useEffect } from \"react\";\r\nimport './css/codeEditor.css';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { dark, coldarkDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport language from 'react-syntax-highlighter/dist/esm/languages/hljs/1c';\r\n\r\n\r\nconst TodeEditor = (props) => {\r\n  const [content, setContent] = useState(props.data.d.source);\r\n  const [code_lan, setCodelan] = useState(props.data.d.cell_layout.code_lan);\r\n  const [last_update,setLastUpdate] = useState(Date.now())\r\n  const update_atInterval = () => {\r\n    var index = props.data.index;\r\n    console.log(\"useefeect or butoon clicked\",index);\r\n    props.data.updatecell(index,content,\"code_lan\",code_lan,last_update);\r\n    setLastUpdate(Date.now());\r\n  };\r\n  const Lan_list = [\r\n    {\r\n      label: \"javascript\", value: \"javascript\",\r\n    },\r\n    {\r\n      label: \"python\", value: \"python\",\r\n    },\r\n    {\r\n      label: \"c++\", value: \"cpp\",\r\n    },\r\n    {\r\n      label: \"html\", value: \"html\",\r\n    },\r\n  ];\r\n\r\n  const handleKeyDown = (evt) => {\r\n    let value = content,\r\n      selStartPos = evt.currentTarget.selectionStart;\r\n\r\n    console.log(evt.currentTarget);\r\n\r\n    // handle 4-space indent on\r\n    if (evt.key === \"Tab\") {\r\n      value =\r\n        value.substring(0, selStartPos) +\r\n        \"    \" +\r\n        value.substring(selStartPos, value.length);\r\n      evt.currentTarget.selectionStart = selStartPos + 3;\r\n      evt.currentTarget.selectionEnd = selStartPos + 4;\r\n      evt.preventDefault();\r\n\r\n      setContent(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n      // update_atInterval();\r\n    // if (last_update + 5000 < Date.now() ){\r\n    // }\r\n  }, [props.data.d.cell_layout.code_lan, content]);\r\n\r\n  return (\r\n    <div className=\"text-edit-container\">\r\n      <div>\r\n      <div className=\"select-container\">\r\n          <select value={code_lan} onChange={(e)=> {setCodelan(e.target.value)}}>\r\n            {Lan_list.map((option) => (\r\n              <option value={option.value}>{option.label}</option>\r\n            ))}\r\n          </select>\r\n      </div>\r\n\r\n      <textarea\r\n        className=\"code-input\"\r\n        value={content}\r\n        onChange={(evt) => setContent(evt.target.value)}\r\n        onKeyDown={handleKeyDown}\r\n        />\r\n        <button onClick={update_atInterval}>\r\n          save\r\n        </button>\r\n        </div>\r\n      <SyntaxHighlighter  language={code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n        {content}\r\n      </SyntaxHighlighter>\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default TodeEditor;\r\n\r\n\r\n\r\n\r\n// <div className=\"code-edit-container\">\r\n// <textarea\r\n// className=\"code-input\"\r\n// value={content}\r\n// onChange={(_)=>{this.def_contentchange(_.target.value)}}\r\n//  onKeyDown={this.handleKeyDown}\r\n// />\r\n{/* <SyntaxHighlighter  language={d.cell_layout.code_lan} style={coldarkDark} showLineNumbers=\"true\">\r\n{d.source + content}\r\n</SyntaxHighlighter> */}\r\n// <pre className=\"code-output\" //contentEditable={this.def_contentEditable(i)}\r\n// >\r\n// <code className={\"language-\"+d.cell_layout.code_lan}>\r\n// {content}\r\n// </code>\r\n// </pre>\r\n// </div>",["211","212"],{"ruleId":"213","severity":1,"message":"214","line":7,"column":7,"nodeType":"215","messageId":"216","endLine":7,"endColumn":20},{"ruleId":"217","replacedBy":"218"},{"ruleId":"219","replacedBy":"220"},{"ruleId":"213","severity":1,"message":"221","line":6,"column":8,"nodeType":"215","messageId":"216","endLine":6,"endColumn":15},{"ruleId":"213","severity":1,"message":"222","line":31,"column":9,"nodeType":"215","messageId":"216","endLine":31,"endColumn":14},{"ruleId":"213","severity":1,"message":"223","line":32,"column":11,"nodeType":"215","messageId":"216","endLine":32,"endColumn":19},{"ruleId":"213","severity":1,"message":"224","line":3,"column":7,"nodeType":"215","messageId":"216","endLine":3,"endColumn":9},{"ruleId":"213","severity":1,"message":"225","line":1,"column":28,"nodeType":"215","messageId":"216","endLine":1,"endColumn":37},{"ruleId":"213","severity":1,"message":"226","line":8,"column":19,"nodeType":"215","messageId":"216","endLine":8,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":9,"column":10,"nodeType":"215","messageId":"216","endLine":9,"endColumn":14},{"ruleId":"213","severity":1,"message":"228","line":9,"column":16,"nodeType":"215","messageId":"216","endLine":9,"endColumn":27},{"ruleId":"213","severity":1,"message":"224","line":13,"column":7,"nodeType":"215","messageId":"216","endLine":13,"endColumn":9},{"ruleId":"213","severity":1,"message":"229","line":98,"column":13,"nodeType":"215","messageId":"216","endLine":98,"endColumn":18},{"ruleId":"213","severity":1,"message":"230","line":99,"column":13,"nodeType":"215","messageId":"216","endLine":99,"endColumn":17},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"232","line":1,"column":17,"nodeType":"215","messageId":"216","endLine":1,"endColumn":26},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":100,"column":1,"nodeType":"235","messageId":"236","endLine":102,"endColumn":25},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"237","line":10,"column":20,"nodeType":"215","messageId":"216","endLine":10,"endColumn":30},{"ruleId":"213","severity":1,"message":"238","line":11,"column":20,"nodeType":"215","messageId":"216","endLine":11,"endColumn":30},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"226","line":3,"column":19,"nodeType":"215","messageId":"216","endLine":3,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"228","line":4,"column":16,"nodeType":"215","messageId":"216","endLine":4,"endColumn":27},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"237","line":10,"column":20,"nodeType":"215","messageId":"216","endLine":10,"endColumn":30},{"ruleId":"213","severity":1,"message":"239","line":11,"column":10,"nodeType":"215","messageId":"216","endLine":11,"endColumn":18},{"ruleId":"213","severity":1,"message":"238","line":11,"column":20,"nodeType":"215","messageId":"216","endLine":11,"endColumn":30},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"240","line":3,"column":8,"nodeType":"215","messageId":"216","endLine":3,"endColumn":23},{"ruleId":"213","severity":1,"message":"237","line":7,"column":20,"nodeType":"215","messageId":"216","endLine":7,"endColumn":30},{"ruleId":"213","severity":1,"message":"239","line":8,"column":10,"nodeType":"215","messageId":"216","endLine":8,"endColumn":18},{"ruleId":"213","severity":1,"message":"238","line":8,"column":20,"nodeType":"215","messageId":"216","endLine":8,"endColumn":30},{"ruleId":"213","severity":1,"message":"241","line":8,"column":10,"nodeType":"215","messageId":"216","endLine":8,"endColumn":17},{"ruleId":"213","severity":1,"message":"242","line":8,"column":19,"nodeType":"215","messageId":"216","endLine":8,"endColumn":28},{"ruleId":"213","severity":1,"message":"243","line":10,"column":20,"nodeType":"215","messageId":"216","endLine":10,"endColumn":30},{"ruleId":"213","severity":1,"message":"244","line":30,"column":9,"nodeType":"215","messageId":"216","endLine":30,"endColumn":22},{"ruleId":"213","severity":1,"message":"214","line":7,"column":7,"nodeType":"215","messageId":"216","endLine":7,"endColumn":20},{"ruleId":"217","replacedBy":"245"},{"ruleId":"219","replacedBy":"246"},{"ruleId":"213","severity":1,"message":"221","line":6,"column":8,"nodeType":"215","messageId":"216","endLine":6,"endColumn":15},{"ruleId":"213","severity":1,"message":"222","line":31,"column":9,"nodeType":"215","messageId":"216","endLine":31,"endColumn":14},{"ruleId":"213","severity":1,"message":"223","line":32,"column":11,"nodeType":"215","messageId":"216","endLine":32,"endColumn":19},{"ruleId":"213","severity":1,"message":"224","line":3,"column":7,"nodeType":"215","messageId":"216","endLine":3,"endColumn":9},{"ruleId":"213","severity":1,"message":"225","line":1,"column":28,"nodeType":"215","messageId":"216","endLine":1,"endColumn":37},{"ruleId":"213","severity":1,"message":"226","line":8,"column":19,"nodeType":"215","messageId":"216","endLine":8,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":9,"column":10,"nodeType":"215","messageId":"216","endLine":9,"endColumn":14},{"ruleId":"213","severity":1,"message":"228","line":9,"column":16,"nodeType":"215","messageId":"216","endLine":9,"endColumn":27},{"ruleId":"213","severity":1,"message":"224","line":13,"column":7,"nodeType":"215","messageId":"216","endLine":13,"endColumn":9},{"ruleId":"213","severity":1,"message":"229","line":98,"column":13,"nodeType":"215","messageId":"216","endLine":98,"endColumn":18},{"ruleId":"213","severity":1,"message":"230","line":99,"column":13,"nodeType":"215","messageId":"216","endLine":99,"endColumn":17},{"ruleId":"213","severity":1,"message":"232","line":1,"column":17,"nodeType":"215","messageId":"216","endLine":1,"endColumn":26},{"ruleId":"213","severity":1,"message":"241","line":9,"column":10,"nodeType":"215","messageId":"216","endLine":9,"endColumn":17},{"ruleId":"213","severity":1,"message":"242","line":9,"column":19,"nodeType":"215","messageId":"216","endLine":9,"endColumn":28},{"ruleId":"213","severity":1,"message":"244","line":44,"column":9,"nodeType":"215","messageId":"216","endLine":44,"endColumn":22},{"ruleId":"247","severity":1,"message":"248","line":100,"column":23,"nodeType":"249","messageId":"250","endLine":100,"endColumn":25},{"ruleId":"251","severity":1,"message":"252","line":100,"column":35,"nodeType":"253","endLine":100,"endColumn":55},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"240","line":3,"column":8,"nodeType":"215","messageId":"216","endLine":3,"endColumn":23},{"ruleId":"213","severity":1,"message":"237","line":7,"column":20,"nodeType":"215","messageId":"216","endLine":7,"endColumn":30},{"ruleId":"213","severity":1,"message":"238","line":8,"column":22,"nodeType":"215","messageId":"216","endLine":8,"endColumn":32},{"ruleId":"247","severity":1,"message":"248","line":29,"column":23,"nodeType":"249","messageId":"250","endLine":29,"endColumn":25},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"226","line":3,"column":19,"nodeType":"215","messageId":"216","endLine":3,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"228","line":4,"column":16,"nodeType":"215","messageId":"216","endLine":4,"endColumn":27},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"237","line":10,"column":20,"nodeType":"215","messageId":"216","endLine":10,"endColumn":30},{"ruleId":"213","severity":1,"message":"239","line":11,"column":10,"nodeType":"215","messageId":"216","endLine":11,"endColumn":18},{"ruleId":"213","severity":1,"message":"238","line":11,"column":20,"nodeType":"215","messageId":"216","endLine":11,"endColumn":30},{"ruleId":"213","severity":1,"message":"225","line":1,"column":27,"nodeType":"215","messageId":"216","endLine":1,"endColumn":36},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"237","line":10,"column":20,"nodeType":"215","messageId":"216","endLine":10,"endColumn":30},{"ruleId":"213","severity":1,"message":"238","line":11,"column":20,"nodeType":"215","messageId":"216","endLine":11,"endColumn":30},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"213","severity":1,"message":"227","line":4,"column":10,"nodeType":"215","messageId":"216","endLine":4,"endColumn":14},{"ruleId":"213","severity":1,"message":"231","line":5,"column":8,"nodeType":"215","messageId":"216","endLine":5,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":100,"column":1,"nodeType":"235","messageId":"236","endLine":102,"endColumn":25},{"ruleId":"217","replacedBy":"254"},{"ruleId":"219","replacedBy":"255"},"no-unused-vars","'TopMostParent' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["256"],"no-negated-in-lhs",["257"],"'UserBar' is defined but never used.","'topic' is assigned a value but never used.","'selected' is assigned a value but never used.","'fs' is assigned a value but never used.","'useEffect' is defined but never used.","'SyntaxHighlighter' is defined but never used.","'dark' is defined but never used.","'coldarkDark' is defined but never used.","'state' is assigned a value but never used.","'Prop' is assigned a value but never used.","'language' is defined but never used.","'Component' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'setContent' is assigned a value but never used.","'setCodeLan' is assigned a value but never used.","'code_lan' is assigned a value but never used.","'ContentEditable' is defined but never used.","'img_src' is assigned a value but never used.","'setImgSrc' is assigned a value but never used.","'setCodelan' is assigned a value but never used.","'handleKeyDown' is assigned a value but never used.",["256"],["257"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["256"],["257"],"no-global-assign","no-unsafe-negation"]